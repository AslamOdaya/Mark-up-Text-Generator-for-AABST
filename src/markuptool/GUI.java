/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package markuptool;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import static markuptool.GUI.textArea;

import org.xml.sax.SAXException;

/**
 *
 * @author Aslam
 */
public class GUI extends javax.swing.JFrame {

    private String selectedTxt;
    private StyleContext sc;
    private AttributeSet attSetBack, attSetText;
    private CreateXML xmlFile;
    private File file;
    String wordIndicator = "ds_legal";
    String flag = "p_noflag";
    String[] suggestionArr = null;
    String suggestionWords = "";

    /**
     * Creates new form backUpGUI
     */
    public GUI() {

        super("Mark-up Text Generator for AABST");
        initComponents();

        //some layout and limitations for the text area
        textArea.setEditable(false);
       // XmlEditorKit editorKit = new XmlEditorKit();
        // XmlTextPane xmlPane = new XmlTextPane();

        //some attributes for the label that is shown to user.
        adviceLabel.setVisible(false);
        adviceLabel.setForeground(Color.RED);
        markWord.setEnabled(false);
        changeSpelling.setEnabled(false);
       // changeWord.setEnabled(false);

        //centre the window
        setLocationRelativeTo(null);
        //disable resizing the window
        setResizable(false);
        //changeWord.setToolTipText("Select a word and change its spelling.");
        markWord.setToolTipText("Select a word to mark it.");
        markIllegal.setToolTipText("enable to display a word as illegal in the word indicator tag(legal by default)");
        flagIndicator.setToolTipText("Enable to indicate a word is flagged (0not flagged by default)");
        uploadTxt.setToolTipText("Upload a plain-text file");
        open.setToolTipText("Open a existing XML file.");
        jLabel1.setForeground(Color.RED);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        uploadTxt = new javax.swing.JButton();
        markWord = new javax.swing.JButton();
        wordField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        adviceLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextPane();
        open = new javax.swing.JButton();
        markIllegal = new javax.swing.JRadioButton();
        flagIndicator = new javax.swing.JRadioButton();
        changeSpelling = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        uploadTxt.setBackground(new java.awt.Color(0, 51, 255));
        uploadTxt.setText("Upload Text");
        uploadTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadTxtActionPerformed(evt);
            }
        });

        markWord.setBackground(new java.awt.Color(0, 51, 255));
        markWord.setText("Mark Word");
        markWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markWordActionPerformed(evt);
            }
        });

        jLabel1.setText("Double click on a word to select it");

        adviceLabel.setText("Please select only one word!");

        textArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textAreaMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(textArea);

        open.setBackground(new java.awt.Color(0, 51, 255));
        open.setText("Open...");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        markIllegal.setBackground(new java.awt.Color(255, 255, 255));
        markIllegal.setText("Mark Illegal");

        flagIndicator.setText("Flag Indicator");

        changeSpelling.setBackground(new java.awt.Color(0, 51, 255));
        changeSpelling.setText("Change Spelling");
        changeSpelling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSpellingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wordField)
                            .addComponent(markWord, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changeSpelling, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(flagIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(markIllegal, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 42, Short.MAX_VALUE))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(adviceLabel))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(391, 391, 391)
                                .addComponent(uploadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adviceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(wordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(markWord, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(changeSpelling, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(markIllegal)
                        .addGap(18, 18, 18)
                        .addComponent(flagIndicator)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadTxtActionPerformed
        JFileChooser fc = new JFileChooser();
        //set filter to only show text files by default
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(uploadTxt);
        //store the selected file into a variable of type file.
        file = fc.getSelectedFile();
        //check if a file has been chosen.

        try {
            //don't show input dialog if cancel is pressed.
            if (result != JFileChooser.CANCEL_OPTION) {
                //call the method to check file and create new one.
                String xmlTitle = JOptionPane.showInputDialog("Please give a title to the file.");
                String xmlDesc = JOptionPane.showInputDialog("Please give a description to the file.");
                String source = JOptionPane.showInputDialog("Please enter the source of text.");

                xmlFile = new CreateXML(file, xmlTitle, xmlDesc, source);
                markWord.setEnabled(true);
                changeSpelling.setEnabled(true);
            }

        } catch (ParserConfigurationException | IOException | SAXException ex) {
            ex.printStackTrace();
        } catch (TransformerException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //read file
        if (file != null) {
            if (result != JFileChooser.CANCEL_OPTION) {
                readFile(xmlFile.getFileName());
            }
        }

    }//GEN-LAST:event_uploadTxtActionPerformed
    //method to allow adding tags with word suggestions.

    
    public boolean isNumber(String numberStr) {
        try {
            int num = Integer.parseInt(numberStr);
        } catch (NumberFormatException ex) {

            return false;
        }
        return true;

    }

    public void addSuggestion() {

        int suggestionLimit = 0;
        int arrLength = 0;
        //allow user to add up to 5 words ass suggestionArr
        //allow user to input their word suggestion limit
        if (selectedTxt != null) {
            String suggestionLimitStr = JOptionPane.showInputDialog("how many word suggestions would you like to add?(maximum 5)", 5);

            //convert string value to integer
            if (suggestionLimitStr != null) {

                if (isNumber(suggestionLimitStr)) {
                    suggestionLimit = Integer.parseInt(suggestionLimitStr);
                } else {
                    JOptionPane.showMessageDialog(null, "Not a valid number, try again.");
                    addSuggestion();
                }
            }
        }

        //ensure the suggestion number isn't greater than five or less than 0, otherwise start again.
        if (selectedTxt != null) {
            if (suggestionLimit > 5 || suggestionLimit < 0) {
                JOptionPane.showMessageDialog(null, "suggestion limit invalid or too high, please try again.");
                addSuggestion();
            } else {

                if (suggestionLimit == 0) {
                    //add no tags
                    JOptionPane.showMessageDialog(null, "No suggestion tags added");
                } else {
                    //set the array length of suggestion limit
                    suggestionArr = new String[suggestionLimit];
                    //take user input and add to array
                    for (int i = 0; i < suggestionLimit; i++) {
                        
                        suggestionArr[i] = JOptionPane.showInputDialog("please enter suggestion words");
                        //0 1, 2 3, 4
                        if (suggestionArr[i] == null) {
                            //if input dialog is closed without specifying words equal to original suggested limit
                            arrLength = i;
                            suggestionLimit = i;
                        } else {
                            arrLength = suggestionLimit;
                        }
                    }
                    //turn string array into string
                    if (!suggestionArr.equals(null)) {
                        for (int i = 0; i < arrLength; i++) {

                            suggestionWords += "\n"
                                    + "<suggestion>" + suggestionArr[i] + "</suggestion>"
                                    + "\n";
                        }
                        for (int i = 0; i < arrLength; i++) {
                            suggestionArr[i] = "";
                        }

                    }
                }
            }
        }

    }

    //read the file passed in parameter
    public void readFile(String file) {
        FileReader reader = null;
        BufferedReader bReader = null;

        if (this.file != null) {

            try {
                //read the file and then put it into the text field.
                reader = new FileReader(file);
                bReader = new BufferedReader(reader);
                textArea.read(bReader, null);

            } catch (Exception ex) {
            } finally {
                try {
                    if (reader != null) {
                        reader.close();
                    }
                } catch (Exception ex) {

                }
                try {
                    if (bReader != null) {
                        bReader.close();
                    }
                } catch (Exception ex) {
                }
            }

        }

    }
    private void textAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseReleased
        selectedTxt = textArea.getSelectedText();

        if (selectedTxt != null) {
            //set the text in the field with the string contained in this variable
            wordField.setText(selectedTxt);
            /*if contains more than one words, show a message to user & don't
             add it to the text field
             */
            if (selectedTxt.contains(" ")) {

                if ((selectedTxt.startsWith(" ") && (selectedTxt.endsWith(" ")))) {
                    adviceLabel.setVisible(false); /*prevent from showing
                     label if user selects just the space between words*/

                } else {
                    //show a message label to user if they select multiple words.
                    wordField.setText(" ");
                    adviceLabel.setVisible(true);
                }
            }

        } else {
            adviceLabel.setVisible(false);
        }


    }//GEN-LAST:event_textAreaMouseReleased

    private void markWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markWordActionPerformed
        String newWord = null;
        if (wordField.getText() == null || textArea.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please select a word to change.");
        } else {
            textArea.setEditable(true);

            //the tag that needs to be added when a word is changed.
                /*<word>
             <correct_spell>meaning</correct_spell>
             <displayed_spell>meening</displayed_spell>
             </word>*/
            //check 
            //check which of the radio buttons are toggled to insert the appropriate tag.
            if (markIllegal.isSelected() && !flagIndicator.isSelected()) {
                wordIndicator = "ds_illegal";
                flag = "p_noflag";

            } else if (!markIllegal.isSelected() && flagIndicator.isSelected()) {
                wordIndicator = "ds_legal";
                flag = "p_flag";

            } else if (markIllegal.isSelected() && flagIndicator.isSelected()) {
                wordIndicator = "ds_illegal";
                flag = "p_flag";
            } else {
                wordIndicator = "ds_legal";
                flag = "p_noflag";
            }

            addSuggestion();
            //the xml string that replaces old text.
            if (selectedTxt == null) {
                JOptionPane.showMessageDialog(null, "No words selected");
            } else {
                newWord = "\n</unmarked_text>"
                        + "\n"
                        + "     <word>"
                        + "\n              <word_indicator>" + wordIndicator + "</word_indicator>"
                        + "\n              <flag_indicator>" + flag + "</flag_indicator>"
                        + "\n              <correct_spell>" + selectedTxt + "</correct_spell>"
                        + "\n" + suggestionWords
                        + "\n              <displayed_spell>" + wordField.getText() + "</displayed_spell>"
                        + "\n"
                        + "     </word> \n    <unmarked_text>\n";
            }

            //replace the old word with the xml tag
            textArea.replaceSelection(newWord);

            textArea.setEditable(false);
            //empty text field
            wordField.setText(null);

            String text = textArea.getText();

            xmlFile.setUnmarked(text);

            try {
                xmlFile.addChanged();
                xmlFile.cleanXML();

            } catch (SAXException | IOException | ParserConfigurationException | TransformerException ex) {
                JOptionPane.showMessageDialog(null, "This is invalid.");
            }
        }
        //read the file again when word is changed

        readFile(xmlFile.getFileName());
        newWord = "";
        suggestionWords = "";
        selectedTxt = null;

    }//GEN-LAST:event_markWordActionPerformed


    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        JFileChooser fc;
        fc = new JFileChooser();
        //set filter to only show xml files by default
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xml files", "xml");
        fc.setFileFilter(filter);

        int result = fc.showOpenDialog(open);
        //store the selected file into a variable of type file.

        file = fc.getSelectedFile();
        if (file != null) {
            //prevent from uploading if FileChooser is closed after selecting a file
            if (result == JOptionPane.OK_OPTION) {
                String file = this.file.getAbsolutePath();
                try {
                    xmlFile = new CreateXML();
                    xmlFile.setTextFile(this.file);
                    xmlFile.setFileName(this.file.getAbsolutePath());
                } catch (ParserConfigurationException | IOException | SAXException | TransformerException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                readFile(file);
                markWord.setEnabled(true);
                changeSpelling.setEnabled(true);
            }
        }

    }//GEN-LAST:event_openActionPerformed

    private void changeSpellingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSpellingActionPerformed

        if (selectedTxt == null) {
            JOptionPane.showMessageDialog(null, "Please select a word to change.");
        } else {
            String newWord = wordField.getText();

            if (!newWord.equals("")) {
                textArea.setEditable(true);
                textArea.replaceSelection(newWord);
                wordField.setText("");
                textArea.setEditable(false);
                String text = textArea.getText();
                xmlFile.setUnmarked(text);
                newWord = "";
                try {
                    xmlFile.addChanged();
                    xmlFile.cleanXML();

                } catch (SAXException | IOException | ParserConfigurationException | TransformerException ex) {
                    JOptionPane.showMessageDialog(null, "This is invalid.");
                }

            }

        }
    }//GEN-LAST:event_changeSpellingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adviceLabel;
    private javax.swing.JButton changeSpelling;
    private javax.swing.JRadioButton flagIndicator;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton markIllegal;
    private javax.swing.JButton markWord;
    public static javax.swing.JButton open;
    private javax.swing.JPanel panel;
    public static javax.swing.JTextPane textArea;
    public static javax.swing.JButton uploadTxt;
    private javax.swing.JTextField wordField;
    // End of variables declaration//GEN-END:variables
}
